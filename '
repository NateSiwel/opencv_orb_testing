import cv2
import numpy as np
from skimage import data
from skimage.color import rgb2gray
from skimage.feature import match_descriptors, ORB, plot_matches
from skimage.measure import ransac
from skimage.transform import FundamentalMatrixTransform
from skimage.transform import EssentialMatrixTransform
np.set_printoptions(suppress=True)

def add_ones(pts):
    return np.concatenate([pts, np.ones((pts.shape[0], 1))], axis=1)


f_est_avg = []
class FeatureExtractor:
    def __init__(self, K):
        self.orb = cv2.ORB_create()
        self.bf = cv2.BFMatcher(cv2.NORM_HAMMING)
        self.last = None
        self.K = K 
        self.Kinv = np.linalg.inv(K)

    def normalize(self, pts):
        return np.dot(self.Kinv, add_ones(pts).T).T[:, 0:2]

    def denormalize(self, pt):
        ret  = np.dot(self.K, np.array([pt[0], pt[1], 1.0]))
         
        return int(round(ret[0])), int(round(ret[1])) 

    def extract(self, frame):
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        
        #detect
        corners = cv2.goodFeaturesToTrack(gray, 3000, qualityLevel=0.01, minDistance=10)

        #extract
        kps = []
        for i in corners:
            x,y = i.ravel()
            kps.append(cv2.KeyPoint(x, y, 0))
        kps,des = self.orb.compute(gray, kps)


        #match
        matches = None
        if (self.last is not None):
            matches = self.bf.knnMatch(des,self.last['des'],k=2)
            good = []
            for m,n in matches:
                if m.distance < 0.60*n.distance:
                    good.append((kps[m.queryIdx].pt, self.last['kps'][m.trainIdx].pt))

            matches = good
            matches = np.array(matches)

            matches[:, 0, :] = self.normalize(matches[:, 0, :])
            matches[:, 1, :] = self.normalize(matches[:, 1, :])           

            try: 
                model, inliers = ransac(
                    (matches[:, 0],matches[:, 1]),
                    #FundamentalMatrixTransform,
                    EssentialMatrixTransform,
                    min_samples=8,
                    residual_threshold=0.01,
                    max_trials=100,
                )

                matches = matches[inliers]

                #print(model.params)


                #Calculate estimated focal length
                #When focal length is caluclated
                #you can switch to essentialMatrixTransform 
                s,v,d = np.linalg.svd(model.params)
                f_est = np.sqrt(2)/(v[0]+v[1]/2)
                f_est_avg.append(f_est)
                print(f_est, np.median(f_est_avg))

            except ValueError as e:
                print(f"error: {str(e)}")
        self.last = {'kps':kps, 'des':des}
       
        return matches 
